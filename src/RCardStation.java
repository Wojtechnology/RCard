/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author WOJTEK
 */
public class RCardStation extends javax.swing.JFrame {

    DecimalFormat df = new DecimalFormat("0.00");
    StringBuilder studentList = new StringBuilder();
    int[] stuID;
    String[] stuName;
    double[] stuBal;
    String[] genList = new String[0];
    int choice;
    boolean active = false;

    /**
     * Creates new form RCardStation
     */
    public RCardStation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabs = new javax.swing.JTabbedPane();
        foodPanel = new javax.swing.JPanel();
        boxFoodLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        transLogFood = new javax.swing.JTextArea();
        stuIDFoodLabel = new javax.swing.JLabel();
        searchButtonFood = new javax.swing.JButton();
        stuIDInFood = new javax.swing.JTextField();
        commentFood = new javax.swing.JLabel();
        stuIDDisplayFood = new javax.swing.JLabel();
        stuNameDisplayFood = new javax.swing.JLabel();
        stuBalDisplayFood = new javax.swing.JLabel();
        transButtonFood = new javax.swing.JButton();
        transFieldFood = new javax.swing.JTextField();
        transLabelFood = new javax.swing.JLabel();
        otherPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        transLogOther = new javax.swing.JTextArea();
        boxOtherLabel = new javax.swing.JLabel();
        stuIDOtherLabel = new javax.swing.JLabel();
        searchButtonOther = new javax.swing.JButton();
        stuIDInOther = new javax.swing.JTextField();
        commentOther = new javax.swing.JLabel();
        stuIDDisplayOther = new javax.swing.JLabel();
        stuNameDisplayOther = new javax.swing.JLabel();
        stuBalDisplayOther = new javax.swing.JLabel();
        transLabelOther = new javax.swing.JLabel();
        transFieldOther = new javax.swing.JTextField();
        transButtonOther = new javax.swing.JButton();
        fillPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        transLogFill = new javax.swing.JTextArea();
        boxFillLabel = new javax.swing.JLabel();
        stuIDFillLabel = new javax.swing.JLabel();
        searchButtonFill = new javax.swing.JButton();
        stuIDInFill = new javax.swing.JTextField();
        commentFill = new javax.swing.JLabel();
        stuIDDisplayFill = new javax.swing.JLabel();
        stuNameDisplayFill = new javax.swing.JLabel();
        stuBalDisplayFill = new javax.swing.JLabel();
        transLabelFill = new javax.swing.JLabel();
        transFieldFill = new javax.swing.JTextField();
        transButtonFill = new javax.swing.JButton();
        listPanel = new javax.swing.JPanel();
        boxListLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        transLogList = new javax.swing.JTextArea();
        importButton = new javax.swing.JButton();
        searchButtonList = new javax.swing.JButton();
        stuIDListLabel = new javax.swing.JLabel();
        stuIDInList = new javax.swing.JTextField();
        commentList = new javax.swing.JLabel();
        stuIDDisplayList = new javax.swing.JLabel();
        stuNameDisplayList = new javax.swing.JLabel();
        stuBalDisplayList = new javax.swing.JLabel();
        HistClear = new javax.swing.JButton();
        addPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        transLogAdd = new javax.swing.JTextArea();
        boxAddLabel = new javax.swing.JLabel();
        stuIDAddLabel = new javax.swing.JLabel();
        stuFirstNameLabel = new javax.swing.JLabel();
        stuLastNameLabel = new javax.swing.JLabel();
        stuIDAdd = new javax.swing.JTextField();
        firstName = new javax.swing.JTextField();
        lastName = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        commentLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("R-Card Station");
        setBounds(new java.awt.Rectangle(100, 100, 0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        foodPanel.setPreferredSize(new java.awt.Dimension(600, 400));

        boxFoodLabel.setText("Transaction Log");

        transLogFood.setColumns(20);
        transLogFood.setRows(5);
        jScrollPane1.setViewportView(transLogFood);

        stuIDFoodLabel.setText("Student ID:");

        searchButtonFood.setText("Search Student");
        searchButtonFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonFoodActionPerformed(evt);
            }
        });

        commentFood.setText(" ");

        stuIDDisplayFood.setText(" ");

        stuNameDisplayFood.setText(" ");

        stuBalDisplayFood.setText(" ");

        transButtonFood.setText("Complete Transaction");
        transButtonFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transButtonFoodActionPerformed(evt);
            }
        });

        transLabelFood.setText("Cost: $");

        javax.swing.GroupLayout foodPanelLayout = new javax.swing.GroupLayout(foodPanel);
        foodPanel.setLayout(foodPanelLayout);
        foodPanelLayout.setHorizontalGroup(
            foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(foodPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(foodPanelLayout.createSequentialGroup()
                                .addComponent(commentFood)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchButtonFood))
                            .addGroup(foodPanelLayout.createSequentialGroup()
                                .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(foodPanelLayout.createSequentialGroup()
                                        .addComponent(transLabelFood)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(transFieldFood, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(foodPanelLayout.createSequentialGroup()
                                        .addComponent(stuIDFoodLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(stuIDInFood, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(stuIDDisplayFood)
                                    .addComponent(stuNameDisplayFood)
                                    .addComponent(stuBalDisplayFood)
                                    .addComponent(transButtonFood))
                                .addGap(0, 80, Short.MAX_VALUE))))
                    .addComponent(boxFoodLabel))
                .addContainerGap())
        );
        foodPanelLayout.setVerticalGroup(
            foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boxFoodLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(foodPanelLayout.createSequentialGroup()
                        .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stuIDFoodLabel)
                            .addComponent(stuIDInFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButtonFood)
                            .addComponent(commentFood))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuIDDisplayFood)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuNameDisplayFood)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuBalDisplayFood)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(foodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(transFieldFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transLabelFood))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transButtonFood)))
                .addContainerGap())
        );

        mainTabs.addTab("Nella's food", foodPanel);

        otherPanel.setPreferredSize(new java.awt.Dimension(600, 400));

        transLogOther.setColumns(20);
        transLogOther.setRows(5);
        jScrollPane3.setViewportView(transLogOther);

        boxOtherLabel.setText("Transaction Log");

        stuIDOtherLabel.setText("Student ID:");

        searchButtonOther.setText("Search Student");
        searchButtonOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonOtherActionPerformed(evt);
            }
        });

        commentOther.setText(" ");

        stuIDDisplayOther.setText(" ");

        stuNameDisplayOther.setText(" ");

        stuBalDisplayOther.setText(" ");

        transLabelOther.setText("Cost: $");

        transButtonOther.setText("Complete Transaction");
        transButtonOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transButtonOtherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout otherPanelLayout = new javax.swing.GroupLayout(otherPanel);
        otherPanel.setLayout(otherPanelLayout);
        otherPanelLayout.setHorizontalGroup(
            otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(otherPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(otherPanelLayout.createSequentialGroup()
                                .addComponent(commentOther)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchButtonOther))
                            .addGroup(otherPanelLayout.createSequentialGroup()
                                .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(otherPanelLayout.createSequentialGroup()
                                        .addComponent(stuIDOtherLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(stuIDInOther, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(stuIDDisplayOther)
                                    .addComponent(stuNameDisplayOther)
                                    .addComponent(stuBalDisplayOther)
                                    .addGroup(otherPanelLayout.createSequentialGroup()
                                        .addComponent(transLabelOther)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(transFieldOther, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(transButtonOther))
                                .addGap(0, 80, Short.MAX_VALUE))))
                    .addComponent(boxOtherLabel))
                .addContainerGap())
        );
        otherPanelLayout.setVerticalGroup(
            otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boxOtherLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(otherPanelLayout.createSequentialGroup()
                        .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stuIDOtherLabel)
                            .addComponent(stuIDInOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButtonOther)
                            .addComponent(commentOther))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuIDDisplayOther)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuNameDisplayOther)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuBalDisplayOther)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(otherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(transFieldOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transLabelOther))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transButtonOther)))
                .addContainerGap())
        );

        mainTabs.addTab("Other Transactions", otherPanel);

        fillPanel.setPreferredSize(new java.awt.Dimension(600, 400));

        transLogFill.setColumns(20);
        transLogFill.setRows(5);
        jScrollPane4.setViewportView(transLogFill);

        boxFillLabel.setText("Transaction Log");

        stuIDFillLabel.setText("Student ID:");

        searchButtonFill.setText("Search Student");
        searchButtonFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonFillActionPerformed(evt);
            }
        });

        commentFill.setText(" ");

        stuIDDisplayFill.setText(" ");

        stuNameDisplayFill.setText(" ");

        stuBalDisplayFill.setText(" ");

        transLabelFill.setText(" Recharge Amount: $");

        transButtonFill.setText("Complete Transaction");
        transButtonFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transButtonFillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fillPanelLayout = new javax.swing.GroupLayout(fillPanel);
        fillPanel.setLayout(fillPanelLayout);
        fillPanelLayout.setHorizontalGroup(
            fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fillPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fillPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fillPanelLayout.createSequentialGroup()
                                .addComponent(commentFill)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchButtonFill))
                            .addGroup(fillPanelLayout.createSequentialGroup()
                                .addGroup(fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(fillPanelLayout.createSequentialGroup()
                                        .addComponent(stuIDFillLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(stuIDInFill, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(stuIDDisplayFill)
                                    .addComponent(stuNameDisplayFill)
                                    .addComponent(stuBalDisplayFill)
                                    .addGroup(fillPanelLayout.createSequentialGroup()
                                        .addComponent(transLabelFill)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(transFieldFill, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(transButtonFill))
                                .addGap(0, 80, Short.MAX_VALUE))))
                    .addComponent(boxFillLabel))
                .addContainerGap())
        );
        fillPanelLayout.setVerticalGroup(
            fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fillPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boxFillLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(fillPanelLayout.createSequentialGroup()
                        .addGroup(fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stuIDFillLabel)
                            .addComponent(stuIDInFill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButtonFill)
                            .addComponent(commentFill))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuIDDisplayFill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuNameDisplayFill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuBalDisplayFill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(transFieldFill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transLabelFill))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transButtonFill)))
                .addContainerGap())
        );

        mainTabs.addTab("Recharge", fillPanel);

        listPanel.setPreferredSize(new java.awt.Dimension(600, 400));

        boxListLabel.setText("Student List");

        transLogList.setColumns(20);
        transLogList.setRows(5);
        jScrollPane2.setViewportView(transLogList);

        importButton.setText("Import File");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        searchButtonList.setText("Search Student");
        searchButtonList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonListActionPerformed(evt);
            }
        });

        stuIDListLabel.setText("Student ID:");

        commentList.setText(" ");

        stuIDDisplayList.setText(" ");

        stuNameDisplayList.setText(" ");

        stuBalDisplayList.setText(" ");

        HistClear.setText("Clear Transaction History");
        HistClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listPanelLayout = new javax.swing.GroupLayout(listPanel);
        listPanel.setLayout(listPanelLayout);
        listPanelLayout.setHorizontalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listPanelLayout.createSequentialGroup()
                        .addComponent(boxListLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(listPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(listPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(listPanelLayout.createSequentialGroup()
                                        .addComponent(stuIDListLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(stuIDInList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 90, Short.MAX_VALUE))
                                    .addGroup(listPanelLayout.createSequentialGroup()
                                        .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(listPanelLayout.createSequentialGroup()
                                                .addComponent(commentList)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(searchButtonList))
                                            .addGroup(listPanelLayout.createSequentialGroup()
                                                .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(stuIDDisplayList)
                                                    .addComponent(stuNameDisplayList)
                                                    .addComponent(stuBalDisplayList))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listPanelLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(importButton)))
                                        .addContainerGap())))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(HistClear)
                                .addContainerGap())))))
        );
        listPanelLayout.setVerticalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boxListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(listPanelLayout.createSequentialGroup()
                        .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stuIDListLabel)
                            .addComponent(stuIDInList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButtonList)
                            .addComponent(commentList))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuIDDisplayList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuNameDisplayList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stuBalDisplayList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(HistClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importButton)))
                .addContainerGap())
        );

        mainTabs.addTab("Student List", listPanel);

        transLogAdd.setColumns(20);
        transLogAdd.setRows(5);
        jScrollPane5.setViewportView(transLogAdd);

        boxAddLabel.setText("Transaction Log");

        stuIDAddLabel.setText("Student ID:");

        stuFirstNameLabel.setText("First Name:");

        stuLastNameLabel.setText("Last Name:");

        addButton.setText("Add Student");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        commentLabel.setText(" ");

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(addPanelLayout.createSequentialGroup()
                                    .addComponent(stuIDAddLabel)
                                    .addGap(28, 28, 28)
                                    .addComponent(stuIDAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                                .addGroup(addPanelLayout.createSequentialGroup()
                                    .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(stuFirstNameLabel)
                                        .addComponent(stuLastNameLabel))
                                    .addGap(29, 29, 29)
                                    .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(firstName)
                                        .addComponent(lastName)))
                                .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(commentLabel)))
                    .addComponent(boxAddLabel))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boxAddLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stuIDAddLabel)
                            .addComponent(stuIDAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stuFirstNameLabel)
                            .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stuLastNameLabel)
                            .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commentLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        mainTabs.addTab("Add Student", addPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        openStudentList("studentList.txt");
        File file = new File("transactionHistory.txt");
        try {
            List<String> lines = FileUtils.readLines(file);
        } catch (IOException ex) {
            Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
            try {
                PrintWriter writer = new PrintWriter("transactionHistory.txt", "UTF-8");
                writer.println("Transaction History :: R-Card Station Ver.1.0");
                writer.println("----------");
                writer.close();
            } catch (FileNotFoundException ex1) {
                Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex1);
            } catch (UnsupportedEncodingException ex1) {
                Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        transactionDisplay();
    }//GEN-LAST:event_formWindowOpened

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        JFileChooser importFile = new JFileChooser();
        importFile.showOpenDialog(null);
        File tempFile = importFile.getSelectedFile();
        String fileName = tempFile.getAbsolutePath();
        openStudentList(fileName);
        commentClear();
    }//GEN-LAST:event_importButtonActionPerformed

    private void searchButtonListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonListActionPerformed
        commentClear();
        if (stuIDInList.getText().length() == 7) {
            if (search(Integer.parseInt(stuIDInList.getText())) == true) {
                commentList.setText("Student Found");
                commentList.setForeground(Color.BLUE);
                chooseStudent(true);
                formClear();
            } else {
                commentList.setText("Student Not Found");
                commentList.setForeground(Color.RED);
                chooseStudent(false);
            }
        } else {
            commentList.setText("Unacceptable Student ID");
            commentList.setForeground(Color.RED);
            chooseStudent(false);
        }
    }//GEN-LAST:event_searchButtonListActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        commentClear();
        stuIDAddLabel.setForeground(Color.BLACK);
        stuFirstNameLabel.setForeground(Color.BLACK);
        stuLastNameLabel.setForeground(Color.BLACK);
        int error = 0;
        if (stuIDAdd.getText().length() != 7) {
            commentLabel.setText("Unacceptable Student ID");
            commentLabel.setForeground(Color.RED);
            stuIDAddLabel.setForeground(Color.RED);
            error++;
        }
        if (firstName.getText().length() == 0) {
            commentLabel.setText("Missing First Name");
            commentLabel.setForeground(Color.RED);
            stuFirstNameLabel.setForeground(Color.RED);
            error++;
        }
        if (lastName.getText().length() == 0) {
            commentLabel.setText("Missing Last Name");
            commentLabel.setForeground(Color.RED);
            stuLastNameLabel.setForeground(Color.RED);
            error++;
        }
        if (error > 1) {
            commentLabel.setText("Multiple Errors");
            commentLabel.setForeground(Color.RED);
        }
        if (search(Integer.parseInt(stuIDAdd.getText())) == true) {
            commentLabel.setText("Student Exists");
            commentLabel.setForeground(Color.RED);
            stuIDAddLabel.setForeground(Color.RED);
            error++;
        }
        if (error == 0) {
            PrintWriter writer = null;
            try {
                writer = new PrintWriter("studentList.txt", "UTF-8");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (int i = 0; i < genList.length / 3; i++) {
                writer.println(stuID[i]);
                writer.println(stuName[i]);
                writer.println(df.format(stuBal[i]));
            }
            writer.println(stuIDAdd.getText());
            writer.println(lastName.getText() + ", " + firstName.getText());
            writer.println(df.format(0.00));
            writer.close();
            openStudentList("studentList.txt");
            PrintWriter writerHist;
            try {
                List<String> lines = null;
                try {
                    File file = new File("transactionHistory.txt");
                    lines = FileUtils.readLines(file);
                } catch (IOException ex) {
                    Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                }
                DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                Date date = new Date();
                writerHist = new PrintWriter("transactionHistory.txt", "UTF-8");
                for (String thing : lines) {
                    writerHist.println(thing);
                }
                writerHist.println(dateFormat.format(date));
                writerHist.println("Type: Add Student");
                writerHist.println("Student ID: " + stuIDAdd.getText());
                writerHist.println("Student Name: " + lastName.getText() + ", " + firstName.getText());
                writerHist.println(df.format(0.00));
                writerHist.println("----------");
                writerHist.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
            }
            transactionDisplay();
            chooseStudent(false);
            stuIDAdd.setText("");
            firstName.setText("");
            lastName.setText("");
            commentLabel.setText("Student Added");
            commentLabel.setForeground(Color.BLUE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void searchButtonFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonFillActionPerformed
        commentClear();
        if (stuIDInFill.getText().length() == 7) {
            if (search(Integer.parseInt(stuIDInFill.getText())) == true) {
                commentFill.setText("Student Found");
                commentFill.setForeground(Color.BLUE);
                chooseStudent(true);
                formClear();
            } else {
                commentFill.setText("Student Not Found");
                commentFill.setForeground(Color.RED);
                chooseStudent(false);
            }
        } else {
            commentFill.setText("Unacceptable Student ID");
            commentFill.setForeground(Color.RED);
            chooseStudent(false);
        }
    }//GEN-LAST:event_searchButtonFillActionPerformed

    private void searchButtonFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonFoodActionPerformed
        commentClear();
        if (stuIDInFood.getText().length() == 7) {
            if (search(Integer.parseInt(stuIDInFood.getText())) == true) {
                commentFood.setText("Student Found");
                commentFood.setForeground(Color.BLUE);
                chooseStudent(true);
                formClear();
            } else {
                commentFood.setText("Student Not Found");
                commentFood.setForeground(Color.RED);
                chooseStudent(false);
            }
        } else {
            commentFood.setText("Unacceptable Student ID");
            commentFood.setForeground(Color.RED);
            chooseStudent(false);
        }
    }//GEN-LAST:event_searchButtonFoodActionPerformed

    private void searchButtonOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonOtherActionPerformed
        commentClear();
        if (stuIDInOther.getText().length() == 7) {
            if (search(Integer.parseInt(stuIDInOther.getText())) == true) {
                commentOther.setText("Student Found");
                commentOther.setForeground(Color.BLUE);
                chooseStudent(true);
                formClear();
            } else {
                commentOther.setText("Student Not Found");
                commentOther.setForeground(Color.RED);
                chooseStudent(false);
            }
        } else {
            commentOther.setText("Unacceptable Student ID");
            commentOther.setForeground(Color.RED);
            chooseStudent(false);
        }
    }//GEN-LAST:event_searchButtonOtherActionPerformed

    private void transButtonFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transButtonFoodActionPerformed
        commentClear();
        if (active == true) {
            if (Double.parseDouble(transFieldFood.getText()) > 0) {
                if (stuBal[choice] - Double.parseDouble(df.format(Double.parseDouble(transFieldFood.getText()))) >= 0) {
                    commentFood.setText("Transaction Completed");
                    commentFood.setForeground(Color.BLUE);
                    chooseStudent(false);
                    try {
                        transaction((-1.0) * Double.parseDouble(df.format(Double.parseDouble(transFieldFood.getText()))));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    PrintWriter writer;
                    try {
                        List<String> lines = null;
                        try {
                            File file = new File("transactionHistory.txt");
                            lines = FileUtils.readLines(file);
                        } catch (IOException ex) {
                            Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                        Date date = new Date();
                        writer = new PrintWriter("transactionHistory.txt", "UTF-8");
                        for (String thing : lines) {
                            writer.println(thing);
                        }
                        writer.println(dateFormat.format(date));
                        writer.println("Type: Food");
                        writer.println("Student ID: " + stuID[choice]);
                        writer.println("Student Name: " + stuName[choice]);
                        writer.println(df.format(stuBal[choice] + Double.parseDouble(df.format(Double.parseDouble(transFieldFood.getText()))))
                                + " - " + df.format(Double.parseDouble(transFieldFood.getText())) + " = " + df.format(stuBal[choice]));
                        writer.println("----------");
                        writer.close();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    transactionDisplay();
                    formClear();
                } else {
                    commentFood.setText("Balance Too Low");
                    commentFood.setForeground(Color.RED);
                }
            } else {
                commentFood.setText("Amount Entered Not Allowed");
                commentFood.setForeground(Color.RED);
            }
        } else {
            commentFood.setText("Student Not Chosen");
            commentFood.setForeground(Color.RED);
        }
    }//GEN-LAST:event_transButtonFoodActionPerformed

    private void transButtonOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transButtonOtherActionPerformed
        commentClear();
        if (active == true) {
            if (Double.parseDouble(transFieldOther.getText()) > 0) {
                if (stuBal[choice] - Double.parseDouble(df.format(Double.parseDouble(transFieldOther.getText()))) >= 0) {
                    commentOther.setText("Transaction Completed");
                    commentOther.setForeground(Color.BLUE);
                    chooseStudent(false);
                    try {
                        transaction((-1.0) * Double.parseDouble(df.format(Double.parseDouble(transFieldOther.getText()))));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    PrintWriter writer;
                    try {
                        List<String> lines = null;
                        try {
                            File file = new File("transactionHistory.txt");
                            lines = FileUtils.readLines(file);
                        } catch (IOException ex) {
                            Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                        Date date = new Date();
                        writer = new PrintWriter("transactionHistory.txt", "UTF-8");
                        for (String thing : lines) {
                            writer.println(thing);
                        }
                        writer.println(dateFormat.format(date));
                        writer.println("Type: Other");
                        writer.println("Student ID: " + stuID[choice]);
                        writer.println("Student Name: " + stuName[choice]);
                        writer.println(df.format(stuBal[choice] + Double.parseDouble(df.format(Double.parseDouble(transFieldOther.getText()))))
                                + " - " + df.format(Double.parseDouble(transFieldOther.getText())) + " = " + df.format(stuBal[choice]));
                        writer.println("----------");
                        writer.close();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    transactionDisplay();
                    formClear();
                } else {
                    commentOther.setText("Balance Too Low");
                    commentOther.setForeground(Color.RED);
                }
            } else {
                commentOther.setText("Amount Entered Not Allowed");
                commentOther.setForeground(Color.RED);
            }
        } else {
            commentOther.setText("Student Not Chosen");
            commentOther.setForeground(Color.RED);
        }
    }//GEN-LAST:event_transButtonOtherActionPerformed

    private void transButtonFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transButtonFillActionPerformed
        commentClear();
        if (active == true) {
            if (Double.parseDouble(transFieldFill.getText()) > 0) {
                commentFill.setText("Transaction Completed");
                commentFill.setForeground(Color.BLUE);
                chooseStudent(false);
                try {
                    transaction(Double.parseDouble(df.format(Double.parseDouble(transFieldFill.getText()))));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                }
                PrintWriter writer;
                try {
                    List<String> lines = null;
                    try {
                        File file = new File("transactionHistory.txt");
                        lines = FileUtils.readLines(file);
                    } catch (IOException ex) {
                        Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                    Date date = new Date();
                    writer = new PrintWriter("transactionHistory.txt", "UTF-8");
                    for (String thing : lines) {
                        writer.println(thing);
                    }
                    writer.println(dateFormat.format(date));
                    writer.println("Type: Recharge");
                    writer.println("Student ID: " + stuID[choice]);
                    writer.println("Student Name: " + stuName[choice]);
                    writer.println(df.format(stuBal[choice] - Double.parseDouble(df.format(Double.parseDouble(transFieldFill.getText()))))
                            + " + " + df.format(Double.parseDouble(transFieldFill.getText())) + " = " + df.format(stuBal[choice]));
                    writer.println("----------");
                    writer.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
                }
                transactionDisplay();
                formClear();
            } else {
                commentFill.setText("Amount Entered Not Allowed");
                commentFill.setForeground(Color.RED);
            }
        } else {
            commentFill.setText("Student Not Chosen");
            commentFill.setForeground(Color.RED);
        }
    }//GEN-LAST:event_transButtonFillActionPerformed

    private void HistClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistClearActionPerformed
        commentClear();
        try {
            PrintWriter writer = new PrintWriter("transactionHistory.txt", "UTF-8");
            writer.println("Transaction History :: R-Card Station Ver.1.0");
            writer.println("----------");
            writer.close();
        } catch (FileNotFoundException ex1) {
            Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex1);
        } catch (UnsupportedEncodingException ex1) {
            Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex1);
        }
        transactionDisplay();
        commentList.setText("History Cleared");
        commentList.setForeground(Color.BLUE);
    }//GEN-LAST:event_HistClearActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RCardStation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RCardStation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RCardStation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RCardStation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RCardStation().setVisible(true);
            }
        });
    }

    private void openStudentList(String filePath) {
        try {
            File file = new File(filePath);
            List<String> lines = FileUtils.readLines(file);
            genList = lines.toArray(new String[lines.size()]);

        } catch (IOException ex) {
            Logger.getLogger(RCardStation.class
                    .getName()).log(Level.SEVERE, null, ex);
            commentList.setText("Student List Missing");
            commentList.setForeground(Color.RED);
            mainTabs.setSelectedIndex(3);
        }
        stuID = new int[genList.length / 3];
        stuName = new String[genList.length / 3];
        stuBal = new double[genList.length / 3];
        for (int i = 0; i < genList.length / 3; i++) {
            stuID[i] = Integer.parseInt(genList[i * 3]);
            stuName[i] = genList[i * 3 + 1];
            stuBal[i] = Double.parseDouble(genList[i * 3 + 2]);
        }
        for (int i = 0; i < genList.length / 3; i++) {
            for (int j = 0; j < genList.length / 3; j++) {
                if (stuID[i] < stuID[j]) {
                    int tempInt = stuID[i];
                    stuID[i] = stuID[j];
                    stuID[j] = tempInt;
                    String tempStr = stuName[i];
                    stuName[i] = stuName[j];
                    stuName[j] = tempStr;
                    double tempDub = stuBal[i];
                    stuBal[i] = stuBal[j];
                    stuBal[j] = tempDub;
                }
            }
        }
        transLogList.setText(appendStudentList());
        try {
            saveStudentList();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RCardStation.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(RCardStation.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveStudentList() throws FileNotFoundException, UnsupportedEncodingException {
        PrintWriter writer = new PrintWriter("studentList.txt", "UTF-8");
        for (int i = 0; i < genList.length / 3; i++) {
            writer.println(stuID[i]);
            writer.println(stuName[i]);
            writer.println(df.format(stuBal[i]));
        }
        writer.close();
    }

    private String appendStudentList() {
        studentList.setLength(0);
        for (int i = 0; i < genList.length / 3; i++) {
            if (i == genList.length / 3 - 1) {
                studentList.append(stuID[i]).append(" - ").append(stuName[i]).append(" - $").append(df.format(stuBal[i]));
            } else {
                studentList.append(stuID[i]).append(" - ").append(stuName[i]).append(" - $").append(df.format(stuBal[i])).append("\n");
            }
        }
        return studentList + "";
    }

    private boolean search(int entered) {
        boolean found = false;
        for (int i = 0; i < genList.length / 3; i++) {
            if (entered == stuID[i]) {
                found = true;
                choice = i;
            }
        }
        return found;
    }

    private void chooseStudent(boolean found) {
        if (found == true) {
            stuIDDisplayList.setText("Student ID: " + stuID[choice]);
            stuNameDisplayList.setText("Student Name: " + stuName[choice]);
            stuBalDisplayList.setText("Balance: $" + df.format(stuBal[choice]));
            stuIDDisplayFill.setText("Student ID: " + stuID[choice]);
            stuNameDisplayFill.setText("Student Name: " + stuName[choice]);
            stuBalDisplayFill.setText("Balance: $" + df.format(stuBal[choice]));
            stuIDDisplayOther.setText("Student ID: " + stuID[choice]);
            stuNameDisplayOther.setText("Student Name: " + stuName[choice]);
            stuBalDisplayOther.setText("Balance: $" + df.format(stuBal[choice]));
            stuIDDisplayFood.setText("Student ID: " + stuID[choice]);
            stuNameDisplayFood.setText("Student Name: " + stuName[choice]);
            stuBalDisplayFood.setText("Balance: $" + df.format(stuBal[choice]));
            active = true;
        } else {
            stuIDDisplayList.setText("");
            stuNameDisplayList.setText("");
            stuBalDisplayList.setText("");
            stuIDDisplayFill.setText("");
            stuNameDisplayFill.setText("");
            stuBalDisplayFill.setText("");
            stuIDDisplayOther.setText("");
            stuNameDisplayOther.setText("");
            stuBalDisplayOther.setText("");
            stuIDDisplayFood.setText("");
            stuNameDisplayFood.setText("");
            stuBalDisplayFood.setText("");
            active = false;
        }
    }

    private void commentClear() {
        commentFill.setText("");
        commentOther.setText("");
        commentFood.setText("");
        commentList.setText("");
        commentLabel.setText("");
    }

    private void formClear() {
        stuIDInList.setText("");
        stuIDInFill.setText("");
        stuIDInOther.setText("");
        stuIDInFood.setText("");
        transFieldFood.setText("");
        transFieldOther.setText("");
        transFieldFill.setText("");
    }

    private void transactionDisplay() {
        StringBuilder transHist = new StringBuilder();
        File file = new File("transactionHistory.txt");
        try {
            List<String> lines = FileUtils.readLines(file);
            for (String thing : lines) {
                transHist.append(thing).append("\n");
            }
            transLogFood.setText(transHist + "");
            transLogOther.setText(transHist + "");
            transLogFill.setText(transHist + "");
            transLogAdd.setText(transHist + "");
        } catch (IOException ex) {
            Logger.getLogger(RCardStation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void transaction(double change) throws FileNotFoundException, UnsupportedEncodingException {
        stuBal[choice] = stuBal[choice] + change;
        saveStudentList();
        openStudentList("studentList.txt");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HistClear;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JLabel boxAddLabel;
    private javax.swing.JLabel boxFillLabel;
    private javax.swing.JLabel boxFoodLabel;
    private javax.swing.JLabel boxListLabel;
    private javax.swing.JLabel boxOtherLabel;
    private javax.swing.JLabel commentFill;
    private javax.swing.JLabel commentFood;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JLabel commentList;
    private javax.swing.JLabel commentOther;
    private javax.swing.JPanel fillPanel;
    private javax.swing.JTextField firstName;
    private javax.swing.JPanel foodPanel;
    private javax.swing.JButton importButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField lastName;
    private javax.swing.JPanel listPanel;
    private javax.swing.JTabbedPane mainTabs;
    private javax.swing.JPanel otherPanel;
    private javax.swing.JButton searchButtonFill;
    private javax.swing.JButton searchButtonFood;
    private javax.swing.JButton searchButtonList;
    private javax.swing.JButton searchButtonOther;
    private javax.swing.JLabel stuBalDisplayFill;
    private javax.swing.JLabel stuBalDisplayFood;
    private javax.swing.JLabel stuBalDisplayList;
    private javax.swing.JLabel stuBalDisplayOther;
    private javax.swing.JLabel stuFirstNameLabel;
    private javax.swing.JTextField stuIDAdd;
    private javax.swing.JLabel stuIDAddLabel;
    private javax.swing.JLabel stuIDDisplayFill;
    private javax.swing.JLabel stuIDDisplayFood;
    private javax.swing.JLabel stuIDDisplayList;
    private javax.swing.JLabel stuIDDisplayOther;
    private javax.swing.JLabel stuIDFillLabel;
    private javax.swing.JLabel stuIDFoodLabel;
    private javax.swing.JTextField stuIDInFill;
    private javax.swing.JTextField stuIDInFood;
    private javax.swing.JTextField stuIDInList;
    private javax.swing.JTextField stuIDInOther;
    private javax.swing.JLabel stuIDListLabel;
    private javax.swing.JLabel stuIDOtherLabel;
    private javax.swing.JLabel stuLastNameLabel;
    private javax.swing.JLabel stuNameDisplayFill;
    private javax.swing.JLabel stuNameDisplayFood;
    private javax.swing.JLabel stuNameDisplayList;
    private javax.swing.JLabel stuNameDisplayOther;
    private javax.swing.JButton transButtonFill;
    private javax.swing.JButton transButtonFood;
    private javax.swing.JButton transButtonOther;
    private javax.swing.JTextField transFieldFill;
    private javax.swing.JTextField transFieldFood;
    private javax.swing.JTextField transFieldOther;
    private javax.swing.JLabel transLabelFill;
    private javax.swing.JLabel transLabelFood;
    private javax.swing.JLabel transLabelOther;
    private javax.swing.JTextArea transLogAdd;
    private javax.swing.JTextArea transLogFill;
    private javax.swing.JTextArea transLogFood;
    private javax.swing.JTextArea transLogList;
    private javax.swing.JTextArea transLogOther;
    // End of variables declaration//GEN-END:variables
}
